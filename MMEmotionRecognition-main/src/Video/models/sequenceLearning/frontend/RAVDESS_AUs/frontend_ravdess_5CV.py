"""
    Script to generate the 5CV distribution of the AUs to pocess them with the Sequential model

    author: Cristina Luna.
	date: 03/2022

	Usage:
		e.g.
		 python3 MMEmotionRecognition/src/Video/models/sequenceLearning/frontend/RAVDESS_AUs/frontend_ravdess_5CV.py
		 --AUs_dir <RAVDESS_dir>/processed_AUs
		 --out_dir MMEmotionRecognition/Video/models/sequenceLearning/datasets/RAVDESS_AUs

	Options:
         --AUs_dir  Path to read the AUs dataframes processed
		 --out_dir : Path to save the generated data in the format accepted by the LSTM with attention mechanism
"""
import sys
import argparse
sys.path.append('.')
sys.path.append('..')
sys.path.append('../../')
sys.path.append('../../../')

import numpy as np
import os
import pandas as pd


def get_fold(dict_actors_per_fold, actor_id):
    """
          Get the fold that the actor belongs to.

          :param dict_actors_per_fold[dict] Map with the fold number as key (ranging from 1 to 5) and the list of actors in that test fold as the value of the dict.
          :param actor_id:[int] Id of the actor. We want to obtain the fold where it belongs
      """
    for fold_key in list(dict_actors_per_fold.keys()):
        if(actor_id in dict_actors_per_fold[fold_key]):
            return fold_key

def create_training_validation_df(df_complete_ds, test_fold):
    """
        Divide the data in train and test in a subject-wise 5-CV way. The division is generated before running the training
        of each fold.

        :param df_complete_ds:[DataFrame] Dataframe with the complete list of files generated by create_complete_dataset(..) function
        :param test_fold:[int] Fold to create the train and test sets [ranging from 1 - 5]
    """
    #training
    train_df = df_complete_ds.loc[df_complete_ds["test_fold"] != test_fold]
    #validation or test
    test_df = df_complete_ds.loc[df_complete_ds["test_fold"] == test_fold]
    #drop fold columns:
    train_df = train_df.drop(["test_fold"], axis=1)
    test_df = test_df.drop(["test_fold"], axis=1)
    return train_df, test_df

def create_complete_dataset(data_dir, dict_actors_in_test_per_fold, dict_emotions, out_path_ds, formatting):
    """
   Read AUs and create complete csv file with all the information in the required format:
     ___________________________________________________________________________________________________________________________________
    |      sample_number    |    label(emotion)     |              path_data                               |  sample_id     |test_fold |
    ____________________________________________________________________________________________________________________________________
    |      00000           |      neutral           | <RAVDESS_dir>/processed_AUs/01-01-01-01-01-02-08.csv |   1            | 4        |
    ____________________________________________________________________________________________________________________________________
    ...


      :param data_dir:[str] Path with the processed AUs (all the csvs)
      :param dict_actors_in_test_per_fold:[dict] Map with the fold number as key (ranging from 1 to 5) and the list of actors in that test fold as the value of the dict.
      :param dict_emotions[dict] Mapping that assign a number (key) to each emotion (values)
      :param out_path_ds[str]: Path to save the generated dataframe
      :param formatting[format] Format to apply to the sample_number column
      """
    df_complete_ds = pd.DataFrame([], columns=["sample_number", "label", "path_data", "sample_id", "test_fold"])
    idx = 0
    for au_file in os.listdir(data_dir):
        splitted_name = au_file.split("-")
        actor_id = int(splitted_name[-1].split(".")[0]) - 1
        emotion = dict_emotions[int(splitted_name[2].split(".")[0]) - 1]
        fold = get_fold(dict_actors_in_test_per_fold, actor_id)
        df_complete_ds = df_complete_ds.append(
            pd.DataFrame([[idx, emotion, os.path.join(data_dir, au_file), au_file, fold]],
                         columns=["sample_number", "label", "path_data", "sample_id", "test_fold"]))
        idx += 1
    # convert to correct format sequences
    df_complete_ds["sample_number"] = df_complete_ds["sample_number"].apply(formatting)
    # save complete ds:
    df_complete_ds.to_csv(out_path_ds,index=False, header=None, sep='\t')
    return df_complete_ds

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Configuration of setup and training process")
    parser.add_argument('-AUs', '--AUs_dir', type=str, required=True,
                        help='Path with the embeddings to train/test the models')
    parser.add_argument('-out', '--out_dir', type=str,
                        help='Path to save the AUs & additional material generated by the OpenFace library',
                        default='./')
    args = parser.parse_args()


    #data_dir = "/mnt/ESITUR2/DATASETS/RAVDESS/OPENFACE/AUs_embs" #_withFFMPEG_VAD
    #out_dir = "/home/cristinalunaj/PycharmProjects/sequenceLearning/datasets/RAVDESS_AUs"
    os.makedirs(args.out_dir, exist_ok=True)
    out_path_ds = os.path.join(args.out_dir, "complete_dataset_5CV.txt")
    formatting = lambda x: '{:05d}'.format(x)

    dict_actors_in_test_per_fold = {
        1: [1, 4, 13, 14, 15],
        2: [2, 5, 6, 12, 17],
        3: [9, 10, 11, 18, 19],
        4: [7, 16, 20, 22, 23],
        5: [0, 3, 8, 21],
    }

    dict_emotions = {0: "neutral", 1: "calm", 2: "happy", 3: "sad", 4:"angry", 5:"fear", 6:"disgust", 7: "surprise"}

    if(os.path.exists(out_path_ds)):
        #If complete dataset, load it:
        df_complete_ds = pd.read_csv(out_path_ds, sep='\t', header=None)
        df_complete_ds.columns = ["sample_number", "label", "path_data", "sample_id", "test_fold"]
        df_complete_ds["sample_number"] = df_complete_ds["sample_number"].apply(formatting)
    else:
        df_complete_ds = create_complete_dataset(args.AUs_dir, dict_actors_in_test_per_fold, dict_emotions,out_path_ds, formatting)

    #Create training-validation per fold
    for fold_i in list(dict_actors_in_test_per_fold.keys()):
        train_df_foldi, test_df_foldi = create_training_validation_df(df_complete_ds, fold_i)
        #save dataframes:
        train_df_foldi.to_csv(os.path.join(args.out_dir, "training-fold_"+str(fold_i)+"_outof_"+str(len(dict_actors_in_test_per_fold.keys()))+".txt"),
                              index=False, header=None, sep='\t')
        test_df_foldi.to_csv(os.path.join(args.out_dir, "validation-fold_" + str(fold_i) + "_outof_" + str(
            len(dict_actors_in_test_per_fold.keys())) + ".txt"),
                              index=False, header=None, sep='\t')







