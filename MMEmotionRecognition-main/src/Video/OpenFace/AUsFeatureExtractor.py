"""
    Script to generate the AUs using the OpenFace library

    author: Cristina Luna.
	date: 03/2022

	Usage:
		e.g.
		 python3 MMEmotionRecognition/src/Video/OpenFace/AUsFeatureExtractor.py
		 --videos_dir <RAVDESS_dir>/videos
		 --openFace_path <OpenFace_dir>
		 --out_dir <RAVDESS_dir>/Extracted_AUs
		 --out_dir_processed <RAVDESS_dir>/processed_AUs
	Options:
         --videos_dir Path with the videos to extract the AUs from
		 --openFace_path: Path where you have installed/downloaded the OpenFace library
		 --out_dir : Path to save the AUs & additional material generated by the OpenFace library
		 --out_dir_processed : Path to save the AUs dataframes processed
"""

import os
import pandas as pd
import os
import sys
import argparse
sys.path.append('.')
sys.path.append('..')
sys.path.append('../../')
sys.path.append('../../../')

def extract_features_OpenFace(video_name, in_root_videos, path_installed_openFace, out_path, static=" -au_static"):
    """
        Generate AUs using the OpenFace library

        :param video_name:[str] Name of the video to process
        :param: in_root_videos [str]: Path to the folder that contains all the videos to process
        :param: path_installed_openFace [str]: Path to the folder whwere we installed OpenFace
        :param out_path[str]: Path to save the AUs and extra material generated by OpenFace
        :param static[str]: au_static flag tells OpenFace not to perform dynamic calibration and to use only static models for AU prediction (see: https://github.com/TadasBaltrusaitis/OpenFace/wiki/Action-Units)

    """
    out_path_video = os.path.join(out_path, video_name.split(".")[0])
    os.makedirs(out_path_video, exist_ok=True)
    video_path = os.path.join(in_root_videos, video_name)
    command = os.path.join(path_installed_openFace, "build", "bin", "FeatureExtraction")+ static + " -f "+video_path+" -out_dir "+out_path_video
    os.system(command)


def save_embs_complete(path_folder_OpenFace, out_path_embs):
    """
       Save Dataframes with only the AUs columns
        :param path_folder_OpenFace:[str] Path where the AUs wehre saved during the extraction process of OpenFace
        :param: out_path_embs [str]: Path to the save the new Dataframes generated that only contains onformation ofthe AUs.
    """
    cols2select = ["AU01_r" ,"AU02_r" ,"AU04_r" , "AU05_r","AU06_r", "AU07_r", "AU09_r", "AU10_r","AU12_r","AU14_r","AU15_r", "AU17_r", "AU20_r", "AU23_r", "AU25_r", "AU26_r", "AU45_r", "AU01_c", "AU02_c", "AU04_c" ,"AU05_c", "AU06_c", "AU07_c", "AU09_c", "AU10_c", "AU12_c", "AU14_c", "AU15_c", "AU17_c", "AU20_c", "AU23_c", "AU25_c", "AU26_c", "AU28_c", "AU45_c"]
    for video_folder in os.listdir(path_folder_OpenFace):
        path_AU = os.path.join(path_folder_OpenFace, video_folder, video_folder+".csv")
        df_aus = pd.read_csv(path_AU, ",")
        df_aux = df_aus[cols2select]
        df_aux.to_csv(os.path.join(out_path_embs, video_folder+".csv"), sep=";", header=True, index=False)



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Configuration of setup and training process")
    parser.add_argument('-videos', '--videos_dir', type=str, required=True,
                        help='Path with the embeddings to train/test the models')
    parser.add_argument('-out', '--out_dir', type=str,
                        help='Path to save the AUs & additional material generated by the OpenFace library',
                        default='./')
    parser.add_argument('-outProcessed', '--out_dir_processed', type=str,
                        help='Path to save the AUs extracted from OpenFace after processing them',
                        default='./')
    parser.add_argument('-openFace', '--openFace_path', type=str, required=True,
                        help='Path where you have installed/downloaded the OpenFace library')
    args = parser.parse_args()


    os.makedirs(args.out_dir_processed, exist_ok=True)
    for video in os.listdir(args.videos_dir):
        extract_features_OpenFace(video, args.videos_dir, args.openFace_path, args.out_dir, static="")
    save_embs_complete(args.out_dir, args.out_dir_processed)


